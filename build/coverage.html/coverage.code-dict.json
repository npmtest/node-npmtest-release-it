{"/home/travis/build/npmtest/node-npmtest-release-it/test.js":"/* istanbul instrument in package npmtest_release_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-release-it/lib.npmtest_release_it.js":"/* istanbul instrument in package npmtest_release_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_release_it = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_release_it = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-release-it/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-release-it && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_release_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_release_it\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_release_it.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_release_it.rollup.js'] =\n            local.assetsDict['/assets.npmtest_release_it.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_release_it.__dirname +\n                    '/lib.npmtest_release_it.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/release.js":"const cli = require('./cli'), \n  log = require('./log'), \n  config = require('./config'), \n  tasks = require('./tasks'), \n  when = require('when'),\n  noop = when.resolve(true);\n\nfunction fromCli(args) {\n  return execute(config.parseArgs(args));\n}\n\nfunction execute(opts) {\n\n  config.mergeOptions(opts);\n\n  if(config.isShowVersion) {\n\n    cli.version();\n\n  } else if(config.isShowHelp) {\n\n    cli.help();\n\n  } else {\n\n    if(config.isForce) {\n      log.warn('Using --force, I sure hope you know what you are doing.');\n    }\n\n    if(config.isDebug) {\n      require('when/monitor/console');\n    }\n\n    log.debugDir(config.options);\n\n    return tasks.run(config.options).catch(error => {\n\n      log.error(error);\n\n      if(config.isDebug) {\n        throw error;\n      }\n\n    });\n  }\n\n  return noop;\n}\n\nmodule.exports = {\n  cli: fromCli,\n  execute\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/cli.js":"const log = require('./log'),\n  pkg = require('../package.json'), \n  version = pkg.version;\n\nconst helpText = [\n  `Release It! v${version}`,\n  '',\n  'Usage: release-it <increment> [options]',\n  '',\n  'Use e.g. \"release-it minor\" directly as shorthand for \"release-it --increment=minor\".',\n  '',\n  '-c --config            Path to local configuration options [default: \".release.json\"]',\n  '-d --dry-run           Do not touch or write anything, but show the commands and interactivity',\n  '-e --debug             Output exceptions',\n  '-f --force             Allow empty Git commit, force tag.',\n  '-g --github.release    Release to GitHub',\n  '-h --help              Print this help',\n  '-i --increment         Increment \"major\", \"minor\", \"patch\", or \"pre*\" version; or specify version [default: \"patch\"]',\n  '-m --message           Commit message [default: \"Release %s\"]',\n  '-n --non-interactive   No interaction (assume default answers to questions)',\n  '   --prereleaseId      Identifier for pre-releases (e.g. \"beta\" in \"1.0.0-beta.1\")',\n  '-p --npm.publish       Auto-publish to npm (only relevant in --non-interactive mode)',\n  '   --npm.tag           Registers published package with given tag (default: \"latest\")',\n  '-v --version           Print version number',\n  '-V --verbose           Verbose output'\n].join('\\n');\n\nmodule.exports = {\n  version: function() {\n    log.log(`v${version}`);\n  },\n  help: function() {\n    log.log(helpText);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/log.js":"const util = require('util'), \n  chalk = require('chalk'), \n  config = require('./config');\n\nfunction log() {\n  console.log.apply(console, arguments);\n}\n\nfunction bold() {\n  log(chalk.bold.apply(chalk, arguments));\n}\n\nfunction warn(message) {\n  message = message.message || message;\n  log(chalk.yellow('WARNING'), message);\n}\n\nfunction error(message) {\n  message = message.message || message;\n  log(chalk.red('ERROR'), message);\n}\n\nfunction dir(obj) {\n  log(util.inspect(obj, { depth: null, colors: true }));\n}\n\nfunction verbose() {\n  if(config.isVerbose) {\n    log.apply(null, arguments);\n  }\n}\n\nfunction verboseDir(obj) {\n  if(config.isVerbose) {\n    dir(obj);\n  }\n}\n\nfunction debug() {\n  if(config.isDebug) {\n    log.apply(null, arguments);\n  }\n}\n\nfunction debugDir(obj) {\n  if(config.isDebug) {\n    dir(obj);\n  }\n}\n\nfunction execution() {\n  const args = [].concat.apply([!config.isDryRun ? '[execute]' : '[dry-run]'], arguments);\n  verbose.apply(this, args);\n}\n\nmodule.exports = {\n  log,\n  bold,\n  warn,\n  error,\n  dir,\n  verbose,\n  verboseDir,\n  debug,\n  debugDir,\n  execution\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/config.js":"const path = require('path'),\n  parseArgs = require('minimist'),\n  _ = require('lodash'),\n  fixDeprecatedOptions = require('./deprecated');\n\nconst DEFAULT_CONFIG_PATH = path.resolve(__dirname, '..', 'conf', 'release.json'), \n  LOCAL_CONFIG_PATH = path.resolve(process.cwd(), '.release.json'), \n  LOCAL_PACKAGE_PATH = path.resolve(process.cwd(), 'package.json');\n\nconst defaultOptions = require(DEFAULT_CONFIG_PATH);\n\nconst aliases = {\n  c: 'config',\n  d: 'dry-run',\n  e: 'debug',\n  f: 'force',\n  g: 'github.release',\n  h: 'help',\n  i: 'increment',\n  m: 'message',\n  n: 'non-interactive',\n  p: 'npm.publish',\n  v: 'version',\n  V: 'verbose'\n};\n\nfunction getLocalOptions(localConfigFile) {\n  var localOptions = {};\n  const localOptionsPath = localConfigFile ? path.resolve(process.cwd(), localConfigFile) : LOCAL_CONFIG_PATH;\n\n  try {\n    localOptions = require(localOptionsPath);\n  } catch(error) {\n    if(localConfigFile) {\n      throw new Error(`Cannot find provided local configuration file: ${localOptionsPath}`);\n    } else if(error.code !== 'MODULE_NOT_FOUND') {\n      throw new Error(`Could not load configuration file: ${localOptionsPath}\\n${error}`);\n    }\n  }\n\n  localOptions.pkgFiles = _.isArray(localOptions.pkgFiles) && localOptions.pkgFiles.length === 0 ? false : localOptions.pkgFiles;\n\n  return localOptions;\n}\n\nfunction getNpmPackageOptions() {\n\n  var pkg = {};\n\n  try {\n    pkg = require(LOCAL_PACKAGE_PATH);\n  } catch(error) {\n    pkg = {};\n  }\n\n  return {\n    version: pkg.version,\n    name: pkg.name,\n    private: pkg.private\n  }\n\n}\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nclass Config {\n\n  constructor() {\n    this.cliArguments = {};\n    this.localOptions = {};\n    this.npmPackageOptions = getNpmPackageOptions();\n    this.defaultOptions = getDefaultOptions();\n    this.runtimeOptions = {};\n  };\n\n  parseArgs(args) {\n    const cli = parseArgs(args, {\n      boolean: true,\n      alias: aliases\n    });\n    cli.increment = cli.i = (cli._[0] || cli.i);\n    cli.src = _.extend({commitMessage: cli.message}, cli.src);\n    cli.dist = _.extend({commitMessage: cli.message}, cli.dist);\n    this.cliArguments = cli;\n  };\n\n  mergeOptions(options) {\n\n    options = options || {};\n\n    this.localOptions = getLocalOptions(options.config || this.cliArguments.config);\n\n    const mergedOptions = _.defaultsDeep(\n      {},\n      this.cliArguments,\n      options,\n      this.localOptions,\n      { npm: this.npmPackageOptions },\n      this.defaultOptions\n    );\n\n    mergedOptions.name = this.npmPackageOptions.name || path.basename(process.cwd());\n\n    mergedOptions.verbose = this.cliArguments['non-interactive'] || mergedOptions.verbose;\n\n    this.options = fixDeprecatedOptions(mergedOptions);\n\n  };\n\n  getRuntimeOption(key) {\n    return this.runtimeOptions[key];\n  }\n\n  setRuntimeOption(key, value) {\n    this.runtimeOptions[key] = value;\n  };\n\n  get context() {\n    return _.extend({}, this.options, this.runtimeOptions);\n  }\n\n  get isDebug() {\n    return this.options.debug;\n  }\n\n  get isDryRun() {\n    return this.options['dry-run'];\n  }\n\n  get isForce() {\n    return this.options.force;\n  }\n\n  get isVerbose() {\n    return this.options.verbose;\n  }\n\n  get isShowVersion() {\n    return this.options.version;\n  }\n\n  get isShowHelp() {\n    return this.options.help;\n  }\n\n}\n\nmodule.exports = new Config();\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/deprecated.js":"const util = require('./util');\n\nconst deprecatedOptions = {\n  src: {\n    commitMessage: 'commitMessage',\n    tagName: 'tagName',\n    tagAnnotation: 'tagAnnotation'\n  },\n  dist: {\n    repo: 'distRepo',\n    stageDir: 'distStageDir',\n    baseDir: 'distBase',\n    files: 'distFiles',\n    pkgFiles: 'distPkgFiles'\n  },\n  npm: {\n    publish: 'publish',\n    publishPath: 'publishPath',\n    private: 'private',\n    forcePublishSourceRepo: 'forcePublishSourceRepo'\n  },\n  github: {\n    release: 'githubRelease',\n    releaseName: 'githubReleaseName',\n    tokenRef: 'githubTokenRef'\n  },\n  changelogCommand: 'githubReleaseBodyCommand'\n};\n\nfunction fixAndWarn(options, deprecatedOption, cat, opt) {\n  const log = require('./log'); // TODO: Fix circular ref\n  if(deprecatedOption in options) {\n    log.warn(util.format(`Deprecation notice: the option %s will be removed soon. Please use %s${opt ? '.' + opt : ''} instead.`, deprecatedOption, cat));\n    if(opt) {\n      options[cat][opt] = options[deprecatedOption];\n    } else {\n      options[cat] = options[deprecatedOption];\n    }\n    delete options[deprecatedOption];\n  }\n}\n\nmodule.exports = function fixDeprecatedOptions(options) {\n  for(const cat in deprecatedOptions) {\n    if(typeof deprecatedOptions[cat] === 'object') {\n      for(const opt in deprecatedOptions[cat]) {\n        fixAndWarn(options, deprecatedOptions[cat][opt], cat, opt);\n      }\n    } else {\n      fixAndWarn(options, deprecatedOptions[cat], cat);\n    }\n  }\n  return options;\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/util.js":"const util = require('util'),\n  semver = require('semver'),\n  _ = require('lodash');\n\n_.templateSettings.interpolate = /\\${([\\s\\S]+?)}/g;\n\nconst releaseTypes = ['premajor', 'major', 'preminor', 'minor', 'prepatch', 'patch', 'prerelease', 'pre'];\n\nfunction isValidVersion(value) {\n  return semver.valid(value);\n}\n\nfunction increment(version, increment, identifier) {\n  increment = increment || 'patch';\n  if (releaseTypes.indexOf(increment) === -1) {\n    return increment;\n  } else {\n    return semver.inc(version, increment, identifier);\n  }\n}\n\nfunction format(template, replacements) {\n  if(template.indexOf('%') === -1) {\n    return template;\n  } else {\n    return util.format.apply(null, arguments);\n  }\n}\n\nfunction template(input, context) {\n  return _.template(input)(context);\n}\n\nmodule.exports = {\n  isValidVersion,\n  increment,\n  format,\n  template\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/tasks.js":"const _ = require('lodash'), \n  shell = require('./shell'), \n  log = require('./log'), \n  git = require('./git'), \n  enquiry = require('./enquiry'), \n  when = require('when'), \n  util = require('./util'),\n  config = require('./config'),\n  sequence = require('when/sequence'),\n  noop = when.resolve.bind(when, true);\n\nfunction parseVersion() {\n\n  const options = config.options;\n  const version = util.isValidVersion(options.increment) ? options.increment : options.npm.version;\n\n  if(!version) {\n\n    return git.getLatestTag().then(tag => {\n      if(tag) {\n        const nextVersion = util.increment(tag, options.increment, options.prereleaseId);\n        log.bold(util.format('Latest tag: %s. Next version: %s', tag, nextVersion));\n        config.setRuntimeOption('previousVersion', tag);\n        config.setRuntimeOption('version', nextVersion);\n      } else {\n        throw new Error('Error detecting current version from latest tag.');\n      }\n    }).catch(err => {\n      console.log(err);\n      throw new Error('No version provided. Please provide version argument, or make sure there is a tag to derive it from.');\n    });\n\n  } else {\n    config.setRuntimeOption('previousVersion', version);\n    config.setRuntimeOption('version', util.increment(version, options.increment, options.prereleaseId));\n  }\n}\n\nfunction setRemoteGitUrl() {\n  return git.getRemoteUrl().then(remoteUrl => {\n    config.setRuntimeOption('remoteUrl', remoteUrl);\n  }).catch(err => {\n    throw new Error('Unable to get remote Git url.')\n  });\n}\n\nfunction getChangelog() {\n  const options = config.options;\n  if(options.github.release) {\n    return git.getChangelog(options);\n  }\n}\n\nfunction checkGithubToken() {\n  const options = config.options;\n  if(options.github.release) {\n    const token = git.getGithubToken(options.github.tokenRef);\n    if(!token) {\n      throw new Error(`About to release to GitHub, but ${options.github.tokenRef} environment variable not set`);\n    }\n  }\n}\n\nfunction releaseSourceRepo() {\n\n  log.bold('Release source repo');\n\n  const options = config.options,\n    repo = getSrcRepoTasks(options);\n\n  const executeTasks = [\n    repo.beforeStartCommand,\n    repo.isRepo,\n    repo.checkClean,\n    repo.bump,\n    repo.mkCleanDir,\n    repo.beforeStageCommand,\n    repo.buildCommand,\n    repo.stage,\n    repo.stageDir,\n    repo.hasChanges\n  ];\n\n  if(options.dist.repo) {\n    // Before committing to src repo, do some potentially problematic dist repo tasks.\n    const distRepoTasks = getDistRepoTasks(options);\n    executeTasks.push(distRepoTasks.clone);\n    executeTasks.push(distRepoTasks.copy);\n    executeTasks.push(distRepoTasks.pushd);\n    executeTasks.push(distRepoTasks.bump);\n    executeTasks.push(distRepoTasks.beforeStageCommand);\n    executeTasks.push(distRepoTasks.stageDir);\n    executeTasks.push(distRepoTasks.hasChanges);\n    executeTasks.push(distRepoTasks.popd);\n  }\n\n  if(options['non-interactive']) {\n\n    executeTasks.push(\n            repo.commit,\n            repo.tag,\n            repo.push,\n            repo.pushTags,\n            repo.release,\n            repo.publish\n        )\n\n  } else {\n\n    executeTasks.push(enquiry.bind(null, 'src', repo, options));\n\n  }\n\n  executeTasks.push(repo.afterReleaseCommand);\n\n  return sequence(executeTasks);\n\n}\n\nfunction releaseDistRepo() {\n\n  const options = config.options,\n    repo = getDistRepoTasks(options);\n\n  if(!options.dist.repo) {\n    log.verbose('No distRepo provided, done.');\n    return noop();\n  }\n\n  log.bold('Release distribution repo');\n\n  const executeTasks = [\n    repo.pushd\n  ];\n\n  if(options['non-interactive']) {\n\n    executeTasks.push(\n            repo.commit,\n            repo.tag,\n            repo.push,\n            repo.pushTags,\n            repo.publish\n        )\n\n  } else {\n\n    executeTasks.push(enquiry.bind(null, 'dist', repo, options));\n\n  }\n\n  executeTasks.push(repo.afterReleaseCommand);\n\n  executeTasks.push(repo.popd);\n\n  return sequence(executeTasks);\n\n}\n\nfunction getGenericTasks() {\n  const options = config.options,\n    version = config.getRuntimeOption('version');\n  return {\n    isRepo: git.isGitRepo,\n    status: git.status,\n    stageDir: git.stageDir,\n    push: git.push.bind(null, config.getRuntimeOption('remoteUrl')),\n    pushTags: git.pushTags.bind(null, version),\n    popd: shell.popd\n  }\n}\n\nfunction getSrcRepoTasks() {\n\n  const options = config.options,\n    version = config.getRuntimeOption('version'),\n    isMakeBaseDir = options.buildCommand && options.dist.repo && options.dist.baseDir,\n    isStageBuildDir = !!options.buildCommand && !options.dist.repo && options.dist.baseDir,\n    isPublish = !options['non-interactive'] || (options.npm.publish && !options.dist.repo);\n\n  return _.extend({}, getGenericTasks(options), {\n    mkCleanDir: isMakeBaseDir ? shell.mkCleanDir.bind(null, options.dist.baseDir) : noop,\n    buildCommand: shell.build.bind(null, options.buildCommand, options),\n    beforeStartCommand: options.src.beforeStartCommand ? shell.runTemplateCommand.bind(null, options.src.beforeStartCommand) : noop,\n    checkClean: git.isWorkingDirClean.bind(null, options.requireCleanWorkingDir),\n    bump: shell.bump.bind(null, options.pkgFiles, version),\n    beforeStageCommand: options.src.beforeStageCommand ? shell.runTemplateCommand.bind(null, options.src.beforeStageCommand) : noop,\n    stage: git.stage.bind(null, options.pkgFiles),\n    stageDir: isStageBuildDir ? git.stageDir.bind(null, options.dist.baseDir) : noop,\n    hasChanges: git.hasChanges.bind(null, 'src'),\n    commit: git.commit.bind(null, '.', options.src.commitMessage, version),\n    tag: git.tag.bind(null, version, options.src.tagName, options.src.tagAnnotation),\n    push: git.push.bind(null, config.getRuntimeOption('remoteUrl'), options.src.pushRepo),\n    pushTags: git.pushTags.bind(null, version, options.src.pushRepo),\n    release: options.github.release ? git.release.bind(null, options, config.getRuntimeOption('remoteUrl'), options.src.tagName) : noop,\n    publish: isPublish ? shell.npmPublish.bind(null, options.npm.publishPath, options.npm.tag) : noop,\n    afterReleaseCommand: options.src.afterReleaseCommand ? shell.runTemplateCommand.bind(null, options.src.afterReleaseCommand) : noop\n  });\n}\n\nfunction getDistRepoTasks() {\n\n  const options = config.options,\n    version = config.getRuntimeOption('version'),\n    isPublish = !options['non-interactive'] || (options.npm.publish && !!options.dist.repo),\n    distPkgFiles = options.dist.pkgFiles || options.pkgFiles;\n\n  return _.extend({}, getGenericTasks(options), {\n    bump: shell.bump.bind(null, distPkgFiles, version),\n    beforeStageCommand: options.dist.beforeStageCommand ? shell.runTemplateCommand.bind(null, options.dist.beforeStageCommand) : noop,\n    hasChanges: git.hasChanges.bind(null, 'dist'),\n    clone: git.clone.bind(null, options.dist.repo, options.dist.stageDir),\n    copy: shell.copy.bind(null, options.dist.files, {cwd: options.dist.baseDir}, options.dist.stageDir),\n    pushd: shell.pushd.bind(null, options.dist.stageDir),\n    commit: git.commit.bind(null, '.', options.dist.commitMessage, version),\n    tag: git.tag.bind(null, version, options.dist.tagName, options.dist.tagAnnotation),\n    release: options.github.release ? git.release.bind(null, options, options.dist.repo, options.dist.tagName) : noop,\n    publish: isPublish ? shell.npmPublish.bind(null, options.npm.publishPath, options.npm.tag) : noop,\n    afterReleaseCommand: options.dist.afterReleaseCommand ? shell.runTemplateCommand.bind(null, options.dist.afterReleaseCommand) : noop\n  });\n}\n\nmodule.exports = {\n  run: function(options) {\n    return sequence([\n      parseVersion,\n      setRemoteGitUrl,\n      getChangelog,\n      checkGithubToken,\n      releaseSourceRepo,\n      releaseDistRepo\n    ], options)\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/shell.js":"const path = require('path'), \n  fs = require('fs'), \n  log = require('./log'), \n  config = require('./config'),\n  util = require('./util'),\n  globcp = require('./globcp'), \n  shell = require('shelljs'), \n  when = require('when'), \n  sequence = require('when/sequence'), \n  fn = require('when/node'), \n  noop = when.resolve(true);\n\nconst forcedCmdRe = /^!/;\n\nfunction run(command, commandArgs) {\n\n  const shellCommand = getShellCommand(command.replace(forcedCmdRe, '')), \n    cmd = [].slice.call(arguments).join(' '), \n    normalizedCmd = cmd.replace(forcedCmdRe, ''), \n    args = [].slice.call(arguments, 1), \n    silentState = shell.config.silent;\n\n  shell.config.silent = !config.isVerbose;\n\n  log.execution(normalizedCmd);\n\n  if (normalizedCmd === cmd && config.isDryRun) {\n    return noop;\n  }\n\n  return when.promise((resolve, reject) => {\n\n    if(shellCommand === 'exec') {\n\n      shell.exec(normalizedCmd, (code, output) => {\n        if (code === 0) {\n          resolve({\n            code,\n            output\n          });\n        } else {\n          reject(output);\n        }\n      });\n\n    } else if(shellCommand) {\n\n      resolve(shell[shellCommand].apply(shell, args));\n\n    } else {\n\n      resolve(command.apply(null, args));\n\n    }\n\n    shell.config.silent = silentState;\n\n  });\n\n}\n\nfunction runTemplateCommand(command) {\n  return run(util.template(command, config.context));\n}\n\nfunction getShellCommand(command) {\n  return command && command in shell && typeof shell[command] === 'function' ? command : 'exec';\n}\n\nfunction pushd(path) {\n  return run('pushd', path);\n}\n\nfunction popd() {\n  return run('popd');\n}\n\nfunction mkCleanDir(dir) {\n  return sequence([\n    run.bind(null, 'rm', '-rf', dir),\n    run.bind(null, 'mkdir', '-p', dir)\n  ]);\n}\n\nfunction build(command) {\n  return command ? runTemplateCommand(command) : noop.then(() => {\n    log.verbose('No build command was provided.');\n  });\n}\n\nfunction npmPublish(path, tag) {\n  const publishPath = path || '.';\n  return run('npm', 'publish', publishPath, '--tag', tag);\n}\n\nfunction copy(files, options, target) {\n  log.execution('copy', files, options, target);\n  return !config.isDryRun ? globcp(files, options, target) : noop;\n}\n\nfunction bump(file, version) {\n  if(file) {\n    log.execution('bump', file, version);\n  }\n  if (!config.isDryRun && file !== false) {\n    const files = typeof file === 'string' ? [file] : file;\n    return when.map(files, file => fn.call(fs.readFile, path.resolve(file)).then(data => {\n      const pkg = JSON.parse(data.toString());\n      pkg.version = version;\n      return pkg;\n    }, err => {\n      log.warn(`Could not read ${err.path || file}`);\n      log.debug(err);\n    }).then(data => {\n      if(data){\n        return fn.call(fs.writeFile, file, `${JSON.stringify(data, null, 2)}\\n`);\n      }\n    }).catch(err => {\n      log.warn(`Could not bump version in ${file}`);\n      log.debug(err);\n    }));\n  } else {\n    return noop;\n  }\n}\n\nmodule.exports = {\n  run,\n  runTemplateCommand,\n  pushd,\n  popd,\n  mkCleanDir,\n  build,\n  npmPublish,\n  copy,\n  bump\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/globcp.js":"const fs = require('fs'),\n  gfs = require('graceful-fs'), // Contains fix for the EMFILE (too many open files) issue\n  path = require('path'),\n  glob = require('glob'),\n  mkdirp = require('mkdirp'),\n  when = require('when'),\n  fn = require('when/node');\n\n/**\n * Glob files, then copy matches to target asynchronously.\n * Uses [node-glob](https://github.com/isaacs/node-glob) and [mkdirp](https://github.com/substack/node-mkdirp).\n * Returns a promise that resolves when all dirs and files have been copied.\n *\n * Example call:\n *\n * - `globcp('** /*.txt', targetDir);`\n * - `globcp(['** /*.js', '** /*.json'], {cwd: baseDir}, targetDir);`\n * - `globcp({'dist/': ['** /*.js'], './': ['** /bower.json']], null, targetDir);`\n *\n * @param {String|Array|Object} patterns Pattern or array of patterns to glob, or object of patterns (with keys\n * as `cwd` for the (array of) pattern(s) it holds), see example.\n * @param {Object} options Options object passed as-is to glob\n * @param {String} target Target dir to copy matched dirs and files to\n * @returns {Promise}\n */\n\nfunction globcp(patterns, options, target) {\n  if(!target) {\n    target = options;\n  }\n\n  const dirCache = {},\n    patternBaseDefault = './';\n  var patternObj = {};\n\n  if(typeof patterns === 'string' || Array.isArray(patterns)) {\n    patternObj[options.cwd || patternBaseDefault] = typeof patterns === 'string' ? [patterns] : patterns;\n  } else {\n    patternObj = patterns;\n  }\n\n  function mkdirAsync(path) {\n    return dirCache[path] || (dirCache[path] = fn.call(mkdirp, path));\n  }\n\n  function copyAsync(source, target) {\n    return mkdirAsync(path.dirname(target)).then(() => when.promise((resolve, reject) => {\n      const is = fs.createReadStream(source), \n        os = fs.createWriteStream(target);\n      is.pipe(os);\n      os.on('close', error => {\n        if (error) {\n          reject(error);\n        }\n        resolve(target);\n      });\n    }));\n  }\n\n  return when.map(Object.keys(patternObj), patternBase => when.map(patternObj[patternBase], pattern => fn.call(glob, pattern, {cwd: patternBase})\n    .then(matches => when.map(matches, match => {\n      const src = path.resolve(patternBase, match);\n      return fn.call(fs.stat, src).then(stat => {\n        const dst = path.resolve(target, match);\n        if (stat.isDirectory()) {\n          return mkdirAsync(dst);\n        } else {\n          return copyAsync(src, dst);\n        }\n      });\n    }))\n  ));\n}\n\nmodule.exports = globcp;\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/git.js":"const util = require('./util'), \n  run = require('./shell').run, \n  config = require('./config'), \n  when = require('when'), \n  sequence = require('when/sequence'), \n  GitHubApi = require('github'), \n  repoPathParse = require('parse-repo'), \n  log = require('./log');\n\nconst noop = when.resolve(true),\n  commitRefRe = /#.+$/;\nvar _githubClient = null;\n\nfunction isGitRepo() {\n  return run('!git', 'rev-parse --git-dir');\n}\n\nfunction tagExists(tag) {\n  return run('!git', `show-ref --tags --quiet --verify -- \"refs/tags/${tag}\"`).then(() => true, () => false);\n}\n\nfunction getRemoteUrl() {\n  return run('!git', 'config --get remote.origin.url').then(result => {\n    if(result && result.output) {\n      return result.output.trim();\n    }\n    throw new Error('Could not get remote Git url.');\n  });\n}\n\nfunction isWorkingDirClean(requireCleanWorkingDir) {\n  return requireCleanWorkingDir ? run('!git', 'diff-index --name-only HEAD --exit-code').catch(() => {\n    throw new Error('Working dir must be clean.');\n  }) : noop;\n}\n\nfunction hasChanges(repo) {\n  // Inverted: reject if run promise is resolved (i.e. `git diff-index` returns exit code 0)\n  return when.promise(resolve => {\n    run('!git', 'diff-index --name-only HEAD --exit-code').then(() => {\n      if(!config.isDryRun) {\n        config.setRuntimeOption(`${repo}_has_changes`, false);\n        log.warn(`Nothing to commit in ${repo} repo. The latest commit will be tagged.`);\n      }\n      resolve();\n    }).catch(resolve);\n  });\n}\n\nfunction clone(repo, dir) {\n  const commitRef = repo.match(commitRefRe), \n    branch = commitRef && commitRef[0] ? commitRef[0].replace(/^\\#/, '') : 'master';\n  repo = repo.replace(commitRef, '');\n  return sequence([\n    run.bind(null, 'rm', '-rf', dir),\n    run.bind(null, 'git', 'clone', repo, '-b', branch, '--single-branch', dir)\n  ]);\n}\n\nfunction stage(file) {\n  if(file) {\n    const files = typeof file === 'string' ? file : file.join(' ');\n    return run('git', 'add', files).catch(error => {\n      log.warn(`Could not stage ${file}`);\n    });\n  } else {\n    return noop;\n  }\n}\n\nfunction stageDir(baseDir) {\n  baseDir = baseDir || '.';\n  return run('git', util.format('add %s --all', baseDir));\n}\n\nfunction status() {\n  return run(\n    '!git',\n    'status --short --untracked-files=no'\n  ).then(result => {\n    // Output also when not verbose\n    !config.isVerbose && log.log(result.output);\n  });\n}\n\nfunction commit(path, message, version) {\n  return run(\n    'git',\n    'commit',\n    config.isForce ? '--allow-empty' : '',\n    `--message=\"${util.format(message, version)}\"`,\n    path\n  ).catch(err => {\n    log.debug(err);\n    log.warn('Nothing to commit. The latest commit will be tagged.');\n  });\n}\n\nfunction tag(version, tag, annotation) {\n  return run(\n    'git',\n    'tag',\n    config.isForce ? '--force' : '',\n    '--annotate',\n    `--message=\"${util.format(annotation, version)}\"`,\n    util.format(tag, version)\n  ).then(() => {\n    config.setRuntimeOption('tag_set', true);\n  }).catch(() => {\n    log.warn(`Could not tag. Does tag \"${version}\" already exist? Use --force to move a tag.`);\n  });\n}\n\nfunction getLatestTag() {\n  return run('!git', 'describe --tags --abbrev=0').then(result => {\n    const latestTag = result && result.output ? result.output.trim() : null;\n    return latestTag;\n  });\n}\n\nfunction push(remoteUrl, pushUrl) {\n  const repository = pushUrl || '';\n  return run('git', 'push', repository).catch(err => {\n    log.error('Please make sure an upstream remote repository is configured for the current branch. Example commands:\\n' +\n      `git remote add origin ${remoteUrl}\\n` +\n      'git push --set-upstream origin master');\n    throw new Error(err);\n  });\n}\n\nfunction pushTags(version, pushUrl) {\n  const repository = pushUrl || '';\n  return run(\n    'git',\n    'push',\n    '--follow-tags',\n    config.isForce ? '--force' : '',\n    repository\n  ).catch(() => {\n    log.error(`Could not push tag(s). Does tag \"${version}\" already exist? Use --force to move a tag.`);\n  });\n}\n\nfunction initGithubClient(repo) {\n  if(!_githubClient) {\n    _githubClient = new GitHubApi({\n      version: '3.0.0',\n      debug: config.isDebug,\n      protocol: 'https',\n      host: repo.host === 'github.com' ? '' : repo.host,\n      pathPrefix: repo.host === 'github.com' ? '' : '/api/v3',\n      timeout: 10000,\n      headers: {\n        'user-agent': 'webpro/release-it'\n      }\n    });\n\n    _githubClient.authenticate({\n      type: 'oauth',\n      token: config.getRuntimeOption('github_token')\n    });\n  }\n  return _githubClient;\n}\n\nfunction getGithubToken(tokenRef) {\n  const token = process.env[tokenRef];\n  config.setRuntimeOption('github_token', token);\n  return token;\n}\n\nfunction getChangelog(options) {\n  function runChangelogCommand(command) {\n    return run(command).then(result => {\n      process.stdout.write('\\n');\n      config.setRuntimeOption('changelog', result.output);\n      return options;\n    });\n  }\n\n  if(options.changelogCommand) {\n    if(options.changelogCommand.match(/\\[REV_RANGE\\]/)) {\n      const previousVersion = config.getRuntimeOption('previousVersion');\n      const previousTag = util.format(options.src.tagName, previousVersion);\n      return tagExists(previousTag).then(hasTag => {\n        const command = options.changelogCommand.replace(/\\[REV_RANGE\\]/, hasTag ? `${previousTag}...HEAD` : '');\n        return runChangelogCommand(command);\n      }).catch(err => {\n        log.warn('Probably the current version in package.json is not a known tag in the repository.');\n        throw new Error(`Could not create changelog from latest tag (${previousTag}) to HEAD.`);\n      });\n    } else {\n      return runChangelogCommand(options.changelogCommand);\n    }\n  } else {\n    return noop;\n  }\n}\n\nfunction release(options, remoteUrl, tagName) {\n  const repo = repoPathParse(remoteUrl);\n  const version = config.getRuntimeOption('version');\n\n  log.execution('node-github releases#createRelease', repo.repository);\n\n  const githubClient = initGithubClient(repo),\n    attempts = 3;\n  var success = false;\n\n  if(!config.isDryRun) {\n    return when.iterate(\n      attempt => attempt + 1,\n      attempt => success || attempt === attempts,\n      attempt => when.promise(resolve => {\n        githubClient.repos.createRelease({\n          owner: repo.owner,\n          repo: repo.project,\n          tag_name: util.format(tagName, version),\n          name: util.format(options.github.releaseName, version),\n          body: config.getRuntimeOption('changelog'),\n          prerelease: options.github.preRelease\n        }, (err, response) => {\n          if(err) {\n            log[attempt + 1 < attempts ? 'warn' : 'error'](`${err.defaultMessage} (Attempt ${attempt + 1} of ${attempts})`);\n            log[attempt + 1 < attempts ? 'warn' : 'error'](err.message);\n          } else {\n            log.execution('node-github', response.meta.location, response.tag_name, response.name);\n            log.verbose(response.body);\n            success = true;\n          }\n          resolve();\n        });\n      }),\n      0\n    );\n  } else {\n    return noop;\n  }\n}\n\nmodule.exports = {\n  isGitRepo,\n  getRemoteUrl,\n  status,\n  clone,\n  stage,\n  stageDir,\n  commit,\n  tag,\n  getLatestTag,\n  push,\n  pushTags,\n  getChangelog,\n  getGithubToken,\n  release,\n  isWorkingDirClean,\n  hasChanges\n};\n","/home/travis/build/npmtest/node-npmtest-release-it/release-it/lib/enquiry.js":"const util = require('./util'), \n  config = require('./config'), \n  inquirer = require('inquirer'), \n  when = require('when'), \n  sequence = require('when/sequence');\n\nfunction shouldPublish(options, subject) {\n  const hasDistRepo = !!options.dist.repo;\n  if(!options.npm.name || !options.npm.version) {\n    return false;\n  }\n  if(subject === 'src') {\n    return !hasDistRepo || options.npm.forcePublishSourceRepo;\n  }\n  return !options.npm.forcePublishSourceRepo && hasDistRepo;\n}\n\nmodule.exports = (subject, tasks, options) => {\n\n  const version = config.getRuntimeOption('version'),\n    noop = when.resolve(true);\n\n  const prompts = {\n    status: {\n      prompt: {\n        type: 'confirm',\n        name: 'status',\n        message: 'Show updated files?',\n        default: options.prompt[subject].status\n      },\n      task: tasks.status\n    },\n    commit: {\n      prompt: {\n        type: 'confirm',\n        name: 'commit',\n        message: `Commit (${util.format(options[subject].commitMessage, version)})?`,\n        default: options.prompt[subject].commit,\n        when: function() {\n          return config.getRuntimeOption(`${subject}_has_changes`) !== false;\n        }\n      },\n      task: tasks.commit\n    },\n    tag: {\n      prompt: {\n        type: 'confirm',\n        name: 'tag',\n        message: `Tag (${util.format(options[subject].tagName, version)})?`,\n        default: options.prompt[subject].tag\n      },\n      task: tasks.tag\n    },\n    push: {\n      prompt: {\n        type: 'confirm',\n        name: 'push',\n        message: 'Push?',\n        default: options.prompt[subject].push\n      },\n      task: sequence.bind(null, [tasks.push, tasks.pushTags])\n    },\n    release: {\n      prompt: {\n        type: 'confirm',\n        name: 'release',\n        message: `Create a release on GitHub (${util.format(options.github.releaseName, version)})?`,\n        default: options.prompt[subject].release,\n        when: function(answers) {\n          return options.github.release\n        }\n      },\n      task: tasks.release\n    },\n    publish: {\n      prompt: {\n        type: 'confirm',\n        name: 'publish',\n        message: `Publish \"${options.name}\" to npm?`,\n        default: options.prompt[subject].publish,\n        when: function() {\n          return !options.npm.private && shouldPublish(options, subject);\n        }\n      },\n      task: tasks.publish\n    }\n  };\n\n  function getPrompt(prompt, task) {\n    return () => inquirer.prompt(prompt).then(answers => answers[prompt.name] ? task() : noop);\n  }\n\n  return sequence([\n    getPrompt(prompts.status.prompt, prompts.status.task),\n    getPrompt(prompts.commit.prompt, prompts.commit.task),\n    getPrompt(prompts.tag.prompt, prompts.tag.task),\n    getPrompt(prompts.push.prompt, prompts.push.task),\n    getPrompt(prompts.release.prompt, prompts.release.task),\n    getPrompt(prompts.publish.prompt, prompts.publish.task)\n  ]);\n};\n"}